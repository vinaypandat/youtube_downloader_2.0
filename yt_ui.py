# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'yt_down.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from main import *
from pytube import YouTube



class Ui_Dialog(object):


    def __init__(self):
        self.lbl_welcome = None
        self.youtube_link = None
        self.fetched_link = None

    def font_style(self,name:str,size:int,bold:bool,italic:bool,weight:int) -> QtGui.QFont():
        font = QtGui.QFont()
        font.setFamily(name)
        font.setPointSize(size)
        font.setBold(bold)
        font.setItalic(italic)
        font.setWeight(weight)
        return font


    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(700, 800)
        Dialog.setStyleSheet("background-color: rgb(255, 247, 243);")

        # Welcome to label "Hello Downloader
        self.lbl_welcome = QtWidgets.QLabel(Dialog)
        self.lbl_welcome.setGeometry(QtCore.QRect(125, 40, 450, 41))
        # font = QtGui.QFont()
        # font.setFamily("Calibri")
        # font.setPointSize(24)
        # font.setBold(False)
        # font.setItalic(False)
        # font.setWeight(50)
        # self.lbl_welcome.setFont(font)
        self.lbl_welcome.setMouseTracking(False)
        self.lbl_welcome.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lbl_welcome.setAutoFillBackground(False)
        self.lbl_welcome.setStyleSheet("font: 24pt \"Calibri\";")
        self.lbl_welcome.setObjectName("lbl_welcome")

        # Audio Video option label
        self.lbl_option = QtWidgets.QLabel(Dialog)
        self.lbl_option.setGeometry(QtCore.QRect(30, 100, 180, 21))
        # font = QtGui.QFont()
        # font.setFamily("Calibri")
        # font.setPointSize(14)
        # font.setBold(False)
        # font.setItalic(False)
        # font.setWeight(50)
        # self.lbl_option.setFont(font)
        self.lbl_option.setStyleSheet("font: 14pt \"Calibri\";")
        self.lbl_option.setObjectName("lbl_option")

        # Space to paste link
        self.ent_link = QtWidgets.QLineEdit(Dialog)
        self.ent_link.setGeometry(QtCore.QRect(30, 150, 510, 31))
        self.ent_link.setStyleSheet("font: 12pt \"Calibri\";\n"
                                    "color: rgb(0, 0, 0);")
        self.ent_link.setObjectName("ent_link")

        # Selection of Download link
        self.ent_tag = QtWidgets.QLineEdit(Dialog)
        self.ent_tag.setGeometry(QtCore.QRect(30, 750, 200, 31))
        self.ent_tag.setStyleSheet("font: 12pt \"Calibri\";\n"
                                    "color: rgb(0, 0, 0);")
        self.ent_tag.setObjectName("ent_tag")

        # Tag label for download
        self.lbl_tag = QtWidgets.QLabel(Dialog)
        self.lbl_tag.setGeometry(QtCore.QRect(30, 720, 600, 21))
        self.lbl_tag.setStyleSheet("font: 14pt \"Calibri\";")
        self.lbl_tag.setObjectName("lbl_tag")

        # Download button
        self.btn_download = QtWidgets.QPushButton(Dialog)
        self.btn_download.setGeometry(QtCore.QRect(260, 750, 100, 31))
        self.btn_download.setStyleSheet("font: 12pt \"Calibri\";\n"
                                    "color: rgb(0, 0, 0);")
        self.btn_download.setObjectName("btn_download")
        self.btn_download.clicked.connect(self.download_btn_function)

        # Links Button
        self.btn_link = QtWidgets.QPushButton(Dialog)
        self.btn_link.setGeometry(QtCore.QRect(570, 150, 100, 31))
        self.btn_link.setStyleSheet("font: 12pt \"Calibri\";\n"
                                    "color: rgb(0, 0, 0);")
        self.btn_link.setObjectName("btn_link")
        self.btn_link.clicked.connect(self.link_btn_function)

        # Audio Checkbox
        self.checkBox_audio = QtWidgets.QCheckBox(Dialog)
        self.checkBox_audio.setGeometry(QtCore.QRect(260, 100, 80, 17))
        self.checkBox_audio.setStyleSheet("font: 14pt \"Calibri\";")
        self.checkBox_audio.setObjectName("checkBox_audio")

        # Video Checkbox
        self.checkBox_video = QtWidgets.QCheckBox(Dialog)
        self.checkBox_video.setGeometry(QtCore.QRect(360, 100, 80, 17))
        self.checkBox_video.setStyleSheet("font: 14pt \"Calibri\";")
        self.checkBox_video.setObjectName("checkBox_video")

        # Description Label
        self.lbl_desc = QtWidgets.QLabel(Dialog)
        self.lbl_desc.setGeometry(QtCore.QRect(50, 250, 700, 50))
        self.lbl_desc.setObjectName("lbl_desc")

        # List placeholder for streams
        self.list_streams = QtWidgets.QListWidget(Dialog)
        self.list_streams.setGeometry(QtCore.QRect(50, 360, 600, 235))
        self.list_streams.setObjectName("list_streams")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Youtube Downloader"))
        self.lbl_welcome.setText(_translate("Dialog", "WELCOME DOWNLOADERS"))
        self.lbl_option.setText(_translate("Dialog", "Select Audio/Video"))
        self.lbl_tag.setText(_translate("Dialog", "Enter the tag number for the link you want to download"))
        self.btn_link.setText(_translate("Dialog", "Links"))
        self.btn_download.setText(_translate("Dialog", "Download"))
        self.checkBox_audio.setText(_translate("Dialog", "Audio"))
        self.checkBox_video.setText(_translate("Dialog", "Video"))
        self.lbl_desc.setText(_translate("Dialog", ""))

    # This is link button function
    def link_btn_function(self):
        self.list_streams.clear()
        self.youtube_link = self.ent_link.text()
        self.fetched_link = YouTube(self.youtube_link)
        print(self.youtube_link)
        self.lbl_desc.setText(description(self.fetched_link))
        streams_list = []
        if self.checkBox_audio.isChecked():
            streams_list.extend(fetch_audio_streams(self.fetched_link))
        if self.checkBox_video.isChecked():
            streams_list.extend(fetch_video_streams(self.fetched_link))
        for item in streams_list:
            self.list_streams.addItem(str(item))

    # Download button function
    def download_btn_function(self):
        print(self.ent_tag.text())
        download_stream(self.ent_tag.text(), self.fetched_link)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())